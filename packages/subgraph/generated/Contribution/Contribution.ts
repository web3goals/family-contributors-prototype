// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountReputationSet extends ethereum.Event {
  get params(): AccountReputationSet__Params {
    return new AccountReputationSet__Params(this);
  }
}

export class AccountReputationSet__Params {
  _event: AccountReputationSet;

  constructor(event: AccountReputationSet) {
    this._event = event;
  }

  get accountAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accountReputation(): AccountReputationSetAccountReputationStruct {
    return changetype<AccountReputationSetAccountReputationStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class AccountReputationSetAccountReputationStruct extends ethereum.Tuple {
  get confirmedContributions(): BigInt {
    return this[0].toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Closed extends ethereum.Event {
  get params(): Closed__Params {
    return new Closed__Params(this);
  }
}

export class Closed__Params {
  _event: Closed;

  constructor(event: Closed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get params(): ClosedParamsStruct {
    return changetype<ClosedParamsStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ClosedParamsStruct extends ethereum.Tuple {
  get publishedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get authorAddress(): Address {
    return this[1].toAddress();
  }

  get description(): string {
    return this[2].toString();
  }

  get reward(): BigInt {
    return this[3].toBigInt();
  }

  get potentialContributors(): Array<Address> {
    return this[4].toAddressArray();
  }

  get confirmedContributor(): Address {
    return this[5].toAddress();
  }

  get isClosed(): boolean {
    return this[6].toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProofPosted extends ethereum.Event {
  get params(): ProofPosted__Params {
    return new ProofPosted__Params(this);
  }
}

export class ProofPosted__Params {
  _event: ProofPosted;

  constructor(event: ProofPosted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proof(): ProofPostedProofStruct {
    return changetype<ProofPostedProofStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ProofPostedProofStruct extends ethereum.Tuple {
  get postedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get authorAddress(): Address {
    return this[1].toAddress();
  }

  get extraDataURI(): string {
    return this[2].toString();
  }
}

export class Published extends ethereum.Event {
  get params(): Published__Params {
    return new Published__Params(this);
  }
}

export class Published__Params {
  _event: Published;

  constructor(event: Published) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get params(): PublishedParamsStruct {
    return changetype<PublishedParamsStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class PublishedParamsStruct extends ethereum.Tuple {
  get publishedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get authorAddress(): Address {
    return this[1].toAddress();
  }

  get description(): string {
    return this[2].toString();
  }

  get reward(): BigInt {
    return this[3].toBigInt();
  }

  get potentialContributors(): Array<Address> {
    return this[4].toAddressArray();
  }

  get confirmedContributor(): Address {
    return this[5].toAddress();
  }

  get isClosed(): boolean {
    return this[6].toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contribution__getAccountReputationResultValue0Struct extends ethereum.Tuple {
  get confirmedContributions(): BigInt {
    return this[0].toBigInt();
  }
}

export class Contribution__getParamsResultValue0Struct extends ethereum.Tuple {
  get publishedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get authorAddress(): Address {
    return this[1].toAddress();
  }

  get description(): string {
    return this[2].toString();
  }

  get reward(): BigInt {
    return this[3].toBigInt();
  }

  get potentialContributors(): Array<Address> {
    return this[4].toAddressArray();
  }

  get confirmedContributor(): Address {
    return this[5].toAddress();
  }

  get isClosed(): boolean {
    return this[6].toBoolean();
  }
}

export class Contribution__getProofsResultValue0Struct extends ethereum.Tuple {
  get postedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get authorAddress(): Address {
    return this[1].toAddress();
  }

  get extraDataURI(): string {
    return this[2].toString();
  }
}

export class Contribution extends ethereum.SmartContract {
  static bind(address: Address): Contribution {
    return new Contribution("Contribution", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountReputation(
    accountAddress: Address
  ): Contribution__getAccountReputationResultValue0Struct {
    let result = super.call(
      "getAccountReputation",
      "getAccountReputation(address):((uint256))",
      [ethereum.Value.fromAddress(accountAddress)]
    );

    return changetype<Contribution__getAccountReputationResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAccountReputation(
    accountAddress: Address
  ): ethereum.CallResult<Contribution__getAccountReputationResultValue0Struct> {
    let result = super.tryCall(
      "getAccountReputation",
      "getAccountReputation(address):((uint256))",
      [ethereum.Value.fromAddress(accountAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contribution__getAccountReputationResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentCounter(): BigInt {
    let result = super.call(
      "getCurrentCounter",
      "getCurrentCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentCounter",
      "getCurrentCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getImageSVG(): string {
    let result = super.call("getImageSVG", "getImageSVG():(string)", []);

    return result[0].toString();
  }

  try_getImageSVG(): ethereum.CallResult<string> {
    let result = super.tryCall("getImageSVG", "getImageSVG():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getParams(tokenId: BigInt): Contribution__getParamsResultValue0Struct {
    let result = super.call(
      "getParams",
      "getParams(uint256):((uint256,address,string,uint256,address[],address,bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<Contribution__getParamsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getParams(
    tokenId: BigInt
  ): ethereum.CallResult<Contribution__getParamsResultValue0Struct> {
    let result = super.tryCall(
      "getParams",
      "getParams(uint256):((uint256,address,string,uint256,address[],address,bool))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contribution__getParamsResultValue0Struct>(value[0].toTuple())
    );
  }

  getProofs(tokenId: BigInt): Array<Contribution__getProofsResultValue0Struct> {
    let result = super.call(
      "getProofs",
      "getProofs(uint256):((uint256,address,string)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toTupleArray<Contribution__getProofsResultValue0Struct>();
  }

  try_getProofs(
    tokenId: BigInt
  ): ethereum.CallResult<Array<Contribution__getProofsResultValue0Struct>> {
    let result = super.tryCall(
      "getProofs",
      "getProofs(uint256):((uint256,address,string)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contribution__getProofsResultValue0Struct>()
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ConfirmContributorCall extends ethereum.Call {
  get inputs(): ConfirmContributorCall__Inputs {
    return new ConfirmContributorCall__Inputs(this);
  }

  get outputs(): ConfirmContributorCall__Outputs {
    return new ConfirmContributorCall__Outputs(this);
  }
}

export class ConfirmContributorCall__Inputs {
  _call: ConfirmContributorCall;

  constructor(call: ConfirmContributorCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get confirmedContributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConfirmContributorCall__Outputs {
  _call: ConfirmContributorCall;

  constructor(call: ConfirmContributorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PostProofCall extends ethereum.Call {
  get inputs(): PostProofCall__Inputs {
    return new PostProofCall__Inputs(this);
  }

  get outputs(): PostProofCall__Outputs {
    return new PostProofCall__Outputs(this);
  }
}

export class PostProofCall__Inputs {
  _call: PostProofCall;

  constructor(call: PostProofCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get extraDataURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class PostProofCall__Outputs {
  _call: PostProofCall;

  constructor(call: PostProofCall) {
    this._call = call;
  }
}

export class PublishCall extends ethereum.Call {
  get inputs(): PublishCall__Inputs {
    return new PublishCall__Inputs(this);
  }

  get outputs(): PublishCall__Outputs {
    return new PublishCall__Outputs(this);
  }
}

export class PublishCall__Inputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get description(): string {
    return this._call.inputValues[0].value.toString();
  }

  get reward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get potentialContributors(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class PublishCall__Outputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetImageSVGCall extends ethereum.Call {
  get inputs(): SetImageSVGCall__Inputs {
    return new SetImageSVGCall__Inputs(this);
  }

  get outputs(): SetImageSVGCall__Outputs {
    return new SetImageSVGCall__Outputs(this);
  }
}

export class SetImageSVGCall__Inputs {
  _call: SetImageSVGCall;

  constructor(call: SetImageSVGCall) {
    this._call = call;
  }

  get imageSVG(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetImageSVGCall__Outputs {
  _call: SetImageSVGCall;

  constructor(call: SetImageSVGCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
